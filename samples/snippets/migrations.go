// Copyright 2024 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package snippets

import (
	"database/sql"
	"fmt"

	spannergorm "github.com/googleapis/go-gorm-spanner"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

// Migrations shows how to map and use interleaved tables with gorm.
// Interleaved tables can be mapped as a 'has many' (https://gorm.io/docs/has_many.html)
// association in gorm.
//
// Execute the sample with the command `go run run_sample.go migrations`
// from the samples directory.
func Migrations(projectId, instanceId, databaseId string) error {
	l := logger.Default.LogMode(logger.Info)
	db, err := gorm.Open(spannergorm.New(spannergorm.Config{
		DriverName: "spanner",
		DSN:        fmt.Sprintf("projects/%s/instances/%s/databases/%s", projectId, instanceId, databaseId),
	}), &gorm.Config{PrepareStmt: true, Logger: l})
	if err != nil {
		return fmt.Errorf("failed to open database connection: %v\n", err)
	}

	type singer struct {
		gorm.Model
		FirstName sql.NullString
		LastName  string
		// FullName is generated by the database. The '->' marks this a read-only field.
		FullName string `gorm:"->;type:STRING(MAX) AS (ARRAY_TO_STRING([first_name, last_name], \" \")) STORED;"`
		Active   bool
	}

	m := db.Migrator()
	migrator, ok := m.(spannergorm.SpannerMigrator)
	if !ok {
		return fmt.Errorf("unexpected migrator type: %v", m)
	}
	statements, err := migrator.AutoMigrateDryRun(
		&singer{},
	)
	fmt.Printf("Statements:\n%s\n", statements)

	return nil
}
