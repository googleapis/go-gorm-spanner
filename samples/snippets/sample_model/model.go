package sample_model

import (
	"database/sql"
	"time"

	"cloud.google.com/go/spanner"
	"gorm.io/gorm"
)

type Singer struct {
	gorm.Model
	FirstName sql.NullString
	LastName  string
	// FullName is generated by the database. The '->' marks this a read-only field.
	FullName string `gorm:"->;type:STRING(MAX) AS (ARRAY_TO_STRING([first_name, last_name], \" \")) STORED;"`
	Active   bool
	Albums   []Album
}

type Album struct {
	// Album does not embed gorm.Model, but instead manually adds the same fields here.
	// This allows us to use a custom name for the ID field, which again makes it easier
	// to define Track as INTERLEAVE IN PARENT Album.
	AlbumID         uint `gorm:"primarykey"`
	CreatedAt       time.Time
	UpdatedAt       time.Time
	DeletedAt       gorm.DeletedAt `gorm:"index"`
	Title           string
	MarketingBudget sql.NullFloat64
	ReleaseDate     spanner.NullDate
	CoverPicture    []byte
	SingerId        int64
	Singer          Singer
	Tracks          []Track
}

// Track is interleaved in Album. The ID column is both the first part of the
// primary key of Track, and a reference to the Album that owns the Track.
type Track struct {
	AlbumID uint `gorm:"primarykey"`
	// Mark TrackNumber as part of the primary key. It is not an auto-incremented value.
	TrackNumber int64 `gorm:"primaryKey;autoIncrement:false"`
	CreatedAt   time.Time
	UpdatedAt   time.Time
	DeletedAt   gorm.DeletedAt `gorm:"index"`
	Title       string
	SampleRate  float64
	Album       Album
}

type Venue struct {
	gorm.Model
	Name         string
	VenueDetails spanner.NullJSON
}

// VenueDetails is stored as a JSON column in the Venue model.
type VenueDetails struct {
	Name   spanner.NullString   `json:"name"`
	Rating spanner.NullFloat64  `json:"rating"`
	Open   interface{}          `json:"open"`
	Tags   []spanner.NullString `json:"tags"`
}

type Concert struct {
	gorm.Model
	Name      string
	Venue     Venue
	VenueId   int64
	Singer    Singer
	SingerId  int64
	StartTime time.Time
	EndTime   time.Time
}
